locals {
  secrets = read_terragrunt_config(find_in_parent_folders("secrets/aws-based-infra/rds.hcl"))
  settings = {
    instance_size           = "{{ instance_size | default("db.t3.medium", true) }}"
    multi_az                = {{ multi_az | default(false, true) | lower }}
    engine_version          = "{{ engine_version | default("10.5.17", true) }}"
    parameters_group_family = "{{ parameters_group_family | default("mariadb10.5", true) }}"
    ro_replicas_count       = {{ ro_replicas_count | default(0, true) }}
    storage_size            = {{ storage_size | default(100, true) }}
    master_username         = local.secrets.locals.master_username
    max_allocated_storage   = {{ max_allocated_storage | default(0, true) }}
    apply_immediately       = {{ apply_immediately | default(true, true) | lower }}
    cloudwatch_logs_exports = {
      "error"     = {{ (cloudwatch_logs_exports or {}).get('error', true) | lower }}
      "general"   = {{ (cloudwatch_logs_exports or {}).get('general', true) | lower }}
      "slowquery" = {{ (cloudwatch_logs_exports or {}).get('slowquery', true) | lower }}
      "audit"     = {{ (cloudwatch_logs_exports or {}).get('audit', false) | lower  }}
    }
    skip_final_snapshot = {{ skip_final_snapshot | default(true, true) | lower }}
    performance_insights = {
      enabled          = {{ (performance_insights or {}).get('enabled', true) | lower }}
      retention_period = {{ (performance_insights or {}).get('retention_period', 7) | lower }}
    }
    backups = {
      retention_period         = {{ (backups or {}).get('retention_period', 28) | lower }}
      hourly_snapshots_enabled = {{ (backups or {}).get('hourly_snapshots_enabled', true) | lower }}
      rotate_snapshots = {
        enabled                    = {{ (backups or {}).get('rotate_snapshots', {}).get('enabled', true) | lower }}
        hourly_snapshots_period    = "{{ (backups or {}).get('rotate_snapshots', {}).hourly_snapshots_period | default("60 hours ago", true) }}"
        migration_snapshots_period = "{{ (backups or {}).get('rotate_snapshots', {}).migration_snapshots_period | default("7 days ago", true) }}"
      }
    }
    parameters = {
      reboot_not_required = {
        character_set_server     = "{{ (parameters or {}).get('reboot_not_required', {}).get('character_set_server', 'utf8') }}"
        character_set_client     = "{{ (parameters or {}).get('reboot_not_required', {}).get('character_set_client', 'utf8') }}"
        character_set_connection = "{{ (parameters or {}).get('reboot_not_required', {}).get('character_set_connection', 'utf8') }}"
        character_set_database   = "{{ (parameters or {}).get('reboot_not_required', {}).get('character_set_database', 'utf8') }}"
        character_set_filesystem = "{{ (parameters or {}).get('reboot_not_required', {}).get('character_set_filesystem', 'utf8') }}"
        character_set_results    = "{{ (parameters or {}).get('reboot_not_required', {}).get('character_set_results', 'utf8') }}"
      }
      reboot_required = {
        skip_name_resolve  = "{{ (parameters or {}).get('reboot_required', {}).get('skip_name_resolve', 1) }}"
        thread_cache_size  = "{{ (parameters or {}).get('reboot_required', {}).get('thread_cache_size', 4) }}"
        concurrent_insert  = "{{ (parameters or {}).get('reboot_required', {}).get('concurrent_insert', 1) }}"
        thread_pool_size   = "{{ (parameters or {}).get('reboot_required', {}).get('thread_pool_size', 32) }}"
        performance_schema = "{{ (parameters or {}).get('reboot_required', {}).get('performance_schema', 1) }}"
      }
    }
  }
  backup = { #dedicated AWS Backup
    enabled                   = false
    vault_name                = "rds_backup"
    hourly_period             = 1
    daily_time                = 0
    max_retention             = 90
    notifications             = ["BACKUP_JOB_COMPLETED", "RESTORE_JOB_COMPLETED"]
    sns_opsgenie_endpoint_url = "https://api.opsgenie.com/v1/json/amazonsns?apikey="
    opsgenie_api_key          = local.secrets.locals.opsgenie_api_key
    filter_policy             = {
      "State" = [
        {
          "anything-but" = "COMPLETED"
        }
      ]
    }
  }
}
